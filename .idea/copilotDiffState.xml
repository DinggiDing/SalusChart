<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hdil/saluschart/ExampleUI.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hdil/saluschart/ExampleUI.kt" />
              <option name="originalContent" value="package com.hdil.saluschart&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.hdil.saluschart.core.chart.ChartPoint&#10;import com.hdil.saluschart.core.chart.InteractionType&#10;import com.hdil.saluschart.core.chart.chartDraw.LegendPosition&#10;import com.hdil.saluschart.ui.compose.charts.BarChart&#10;import com.hdil.saluschart.ui.compose.charts.BubbleType&#10;import com.hdil.saluschart.ui.compose.charts.CalendarChart&#10;import com.hdil.saluschart.ui.compose.charts.CalendarEntry&#10;import com.hdil.saluschart.ui.compose.charts.LineChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalBarChart&#10;import com.hdil.saluschart.ui.compose.charts.PieChart&#10;import com.hdil.saluschart.ui.compose.charts.ScatterPlot&#10;import com.hdil.saluschart.ui.theme.Orange&#10;import com.hdil.saluschart.ui.theme.Primary_Purple&#10;import com.hdil.saluschart.ui.theme.Teel&#10;import com.hdil.saluschart.ui.theme.Yellow&#10;import java.time.LocalDate&#10;import java.time.YearMonth&#10;&#10;&#10;private val sampleData = listOf(10f, 25f, 40f, 20f, 35f, 55f, 45f)&#10;private val sampleData2 = listOf(5f, 15f, 60f, 45f, 35f, 25f, 10f)&#10;private val sampleData3 = listOf(8f, 22f, 10f, 40f, 18f, 32f, 12f)&#10;private val weekDays = listOf(&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;)&#10;&#10;private val yearMonth = YearMonth.now()&#10;private val startDate = LocalDate.of(yearMonth.year, 8, 1)&#10;private val endDate = LocalDate.of(yearMonth.year, 8, 25)&#10;private val random = java.util.Random(0)&#10;private val entries = generateSequence(startDate) { date -&gt;&#10;    if (date.isBefore(endDate)) date.plusDays(1) else null&#10;}.map { date -&gt;&#10;    val value = random.nextFloat() * 100&#10;    CalendarEntry(&#10;        date = date,&#10;        value = value,&#10;    )&#10;}.toList()&#10;&#10;// ChartPoint 리스트로 변환&#10;private val chartPoints = sampleData.mapIndexed { index, value -&gt;&#10;    ChartPoint(&#10;        x = index.toFloat(),&#10;        y = value,&#10;        label = weekDays.getOrElse(index) { &quot;&quot; }&#10;    )&#10;}&#10;&#10;private val chartPoint2 = sampleData2.mapIndexed { index, value -&gt;&#10;    ChartPoint(&#10;        x = index.toFloat(),&#10;        y = value,&#10;        label = weekDays.getOrElse(index) { &quot;&quot; }&#10;    )&#10;}&#10;&#10;private val chartPoint3 = sampleData3.mapIndexed { index, value -&gt;&#10;    ChartPoint(&#10;        x = index.toFloat(),&#10;        y = value,&#10;        label = weekDays.getOrElse(index) { &quot;&quot; }&#10;    )&#10;}&#10;&#10;&#10;@Composable&#10;fun ExampleUI(modifier: Modifier = Modifier) {&#10;    val chartType = listOf(&#10;        &quot;BarChart 1&quot;,&#10;        &quot;BarChart 2&quot;,&#10;        &quot;DonutChart 1&quot;,&#10;        &quot;LineChart 1&quot;,&#10;        &quot;LineChart 2&quot;,&#10;        &quot;PieChart 1&quot;,&#10;        &quot;CalendarChart 1&quot;,&#10;        &quot;CalendarChart 2&quot;,&#10;        &quot;ScatterPlot 1&quot;,&#10;        &quot;Minimal Bar Chart&quot;,&#10;        &quot;Minimal Line Chart&quot;,&#10;    )&#10;&#10;    var selectedChartType by remember { mutableStateOf&lt;String?&gt;(&quot;Minimal Bar Chart&quot;) }&#10;&#10;    Column(modifier = modifier.fillMaxSize().padding(16.dp)) {&#10;        if (selectedChartType == null) {&#10;            chartType.forEach { type -&gt;&#10;                Text(&#10;                    text = type,&#10;                    modifier = Modifier&#10;                        .padding(12.dp)&#10;                        .clickable { selectedChartType = type }&#10;                )&#10;            }&#10;        } else {&#10;&#10;            IconButton(&#10;                onClick = { selectedChartType = null },&#10;                modifier = Modifier&#10;                    .padding(top = 16.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Close&quot;,&#10;                    tint = Color.Black,&#10;                    modifier = Modifier.size(32.dp) // 아이콘 크기 조정&#10;&#10;                )&#10;            }&#10;&#10;            when (selectedChartType) {&#10;                &quot;BarChart 1&quot; -&gt; BarChart_1()&#10;                &quot;BarChart 2&quot; -&gt; BarChart_2()&#10;                &quot;DonutChart 1&quot; -&gt; DonutChart_1()&#10;                &quot;LineChart 1&quot; -&gt; LineChart_1()&#10;                &quot;LineChart 2&quot; -&gt; LineChart_2()&#10;                &quot;PieChart 1&quot; -&gt; PieChart_1()&#10;                &quot;CalendarChart 1&quot; -&gt; ChalendarChart_1()&#10;                &quot;CalendarChart 2&quot; -&gt; ChalendarChart_2()&#10;                &quot;ScatterPlot 1&quot; -&gt; ScatterPlot_1()&#10;                &quot;Minimal Bar Chart&quot; -&gt; Minimal_BarChart() // Placeholder for minimal bar chart&#10;                &quot;Minimal Line Chart&quot; -&gt; Minimal_LineChart() // Placeholder for minimal line chart&#10;                else -&gt; Text(&quot;Unknown Chart Type&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BarChart_1() {&#10;    BarChart(&#10;        modifier = Modifier.fillMaxWidth().height(250.dp),&#10;        data = chartPoints,&#10;        xLabel = &quot;Week&quot;,&#10;        yLabel = &quot;Value&quot;,&#10;        title = &quot;Weekly Data&quot;,&#10;        barColor = Primary_Purple,&#10;//        width = 250.dp,&#10;//        height = 250.dp,&#10;        minY = 2f,&#10;        maxY = 60f,&#10;        barWidthRatio = 0.5f,&#10;        labelTextSize = 28f,&#10;        tooltipTextSize = 32f,&#10;        interactionType = InteractionType.BAR&#10;    )&#10;}&#10;&#10;@Composable&#10;fun BarChart_2() {&#10;    Text(&quot;Displaying BarChart 2&quot;)&#10;}&#10;&#10;@Composable&#10;fun DonutChart_1() {&#10;    PieChart(&#10;        modifier = Modifier.fillMaxWidth().height(250.dp),&#10;        data = chartPoints.subList(0, 4),&#10;        title = &quot;요일별 활동량&quot;,&#10;        isDonut = true,&#10;        colors = listOf(Primary_Purple, Teel, Orange, Yellow),&#10;        showLegend = true,&#10;        showLabel = true&#10;    )&#10;}&#10;&#10;@Composable&#10;fun LineChart_1() {&#10;    Box(modifier = Modifier.fillMaxWidth().height(250.dp)) {&#10;&#10;        LineChart(&#10;            modifier = Modifier.fillMaxWidth().height(250.dp),&#10;            data = chartPoints,&#10;            title = &quot;요일별 활동량&quot;,&#10;            yLabel = &quot;활동량&quot;,&#10;            xLabel = &quot;요일&quot;,&#10;            lineColor = Primary_Purple,&#10;            strokeWidth = 4f,&#10;            minY = 0f,&#10;            maxY = 60f,&#10;            interactionType = InteractionType.POINT,&#10;        )&#10;        LineChart(&#10;            modifier = Modifier.fillMaxWidth().height(250.dp),&#10;            data = chartPoint2,&#10;            title = &quot;요일별 활동량&quot;,&#10;            yLabel = &quot;활동량&quot;,&#10;            xLabel = &quot;요일&quot;,&#10;            lineColor = Teel,&#10;            strokeWidth = 4f,&#10;            minY = 0f,&#10;            maxY = 60f,&#10;            interactionType = InteractionType.POINT,&#10;        )&#10;        LineChart(&#10;            modifier = Modifier.fillMaxWidth().height(250.dp),&#10;            data = chartPoint3,&#10;            title = &quot;요일별 활동량&quot;,&#10;            yLabel = &quot;활동량&quot;,&#10;            xLabel = &quot;요일&quot;,&#10;            lineColor = Orange,&#10;            strokeWidth = 4f,&#10;            minY = 0f,&#10;            maxY = 60f,&#10;            interactionType = InteractionType.POINT,&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LineChart_2() {&#10;    LineChart(&#10;        modifier = Modifier.fillMaxWidth().height(250.dp),&#10;        data = chartPoints,&#10;        title = &quot;요일별 활동량&quot;,&#10;        yLabel = &quot;활동량&quot;,&#10;        xLabel = &quot;요일&quot;,&#10;        lineColor = Primary_Purple,&#10;        showPoint = true,&#10;        strokeWidth = 4f,&#10;        minY = 0f,&#10;        maxY = 60f,&#10;        interactionType = InteractionType.NEAR_X_AXIS,&#10;    )&#10;}&#10;&#10;@Composable&#10;fun PieChart_1() {&#10;    PieChart(&#10;        modifier = Modifier.fillMaxWidth().height(500.dp),&#10;        data = chartPoints.subList(0, 4),&#10;        title = &quot;요일별 활동량&quot;,&#10;        isDonut = false,&#10;        colors = listOf(Primary_Purple, Teel, Orange, Yellow),&#10;        showLegend = true,&#10;        legendPosition = LegendPosition.RIGHT&#10;&#10;    )&#10;}&#10;&#10;@Composable&#10;fun ChalendarChart_1() {&#10;    CalendarChart(&#10;        modifier = Modifier.fillMaxWidth().height(600.dp),&#10;        entries = entries,&#10;        yearMonth = yearMonth,&#10;        color = Primary_Purple,&#10;        maxBubbleSize = 10f,&#10;        minBubbleSize = 6f&#10;    )&#10;}&#10;&#10;@Composable&#10;fun ChalendarChart_2() {&#10;    CalendarChart(&#10;        modifier = Modifier.width(300.dp).height(200.dp),&#10;        entries = entries,&#10;        yearMonth = yearMonth,&#10;        color = Primary_Purple,&#10;        bubbleType = BubbleType.RECTANGLE,&#10;        maxBubbleSize = 10f,&#10;        minBubbleSize = 6f&#10;    )&#10;}&#10;&#10;@Composable&#10;fun ScatterPlot_1() {&#10;    ScatterPlot(&#10;        modifier = Modifier.fillMaxWidth().height(500.dp),&#10;        data = chartPoints,&#10;        title = &quot;요일별 활동량&quot;,&#10;        yLabel = &quot;활동량&quot;,&#10;        xLabel = &quot;요일&quot;,&#10;        interactionType = InteractionType.NEAR_X_AXIS&#10;    )&#10;}&#10;&#10;@Composable&#10;fun Minimal_BarChart() {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(20.dp),&#10;        shape = androidx.compose.material3.MaterialTheme.shapes.medium,&#10;        elevation = androidx.compose.material3.CardDefaults.cardElevation(8.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = androidx.compose.foundation.layout.Arrangement.SpaceBetween&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = &quot;오늘 운동&quot;,&#10;                    color = Color(0xFF222222),&#10;//                    fontSize = androidx.compose.ui.unit.sp(18)&#10;                )&#10;                Spacer(Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;1시간 20분&quot;,&#10;                    color = Color(0xFF00C7BE),&#10;//                    fontSize = androidx.compose.ui.unit.sp(28),&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;            }&#10;            MinimalBarChart(&#10;                data = sampleData,&#10;                color = Color(0xFF00C7BE),&#10;                width = 120.dp,&#10;                height = 40.dp,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Minimal_LineChart() {&#10;    // Placeholder for minimal line chart&#10;}" />
              <option name="updatedContent" value="package com.hdil.saluschart&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.hdil.saluschart.core.chart.ChartPoint&#10;import com.hdil.saluschart.core.chart.InteractionType&#10;import com.hdil.saluschart.core.chart.chartDraw.LegendPosition&#10;import com.hdil.saluschart.ui.compose.charts.BarChart&#10;import com.hdil.saluschart.ui.compose.charts.BubbleType&#10;import com.hdil.saluschart.ui.compose.charts.CalendarChart&#10;import com.hdil.saluschart.ui.compose.charts.CalendarEntry&#10;import com.hdil.saluschart.ui.compose.charts.LineChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalBarChart&#10;import com.hdil.saluschart.ui.compose.charts.PieChart&#10;import com.hdil.saluschart.ui.compose.charts.ScatterPlot&#10;import com.hdil.saluschart.ui.theme.Orange&#10;import com.hdil.saluschart.ui.theme.Primary_Purple&#10;import com.hdil.saluschart.ui.theme.Teel&#10;import com.hdil.saluschart.ui.theme.Yellow&#10;import java.time.LocalDate&#10;import java.time.YearMonth&#10;&#10;&#10;private val sampleData = listOf(10f, 25f, 40f, 20f, 35f, 55f, 45f)&#10;private val sampleData2 = listOf(5f, 15f, 60f, 45f, 35f, 25f, 10f)&#10;private val sampleData3 = listOf(8f, 22f, 10f, 40f, 18f, 32f, 12f)&#10;private val weekDays = listOf(&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;)&#10;&#10;private val yearMonth = YearMonth.now()&#10;private val startDate = LocalDate.of(yearMonth.year, 8, 1)&#10;private val endDate = LocalDate.of(yearMonth.year, 8, 25)&#10;private val random = java.util.Random(0)&#10;private val entries = generateSequence(startDate) { date -&gt;&#10;    if (date.isBefore(endDate)) date.plusDays(1) else null&#10;}.map { date -&gt;&#10;    val value = random.nextFloat() * 100&#10;    CalendarEntry(&#10;        date = date,&#10;        value = value,&#10;    )&#10;}.toList()&#10;&#10;// ChartPoint 리스트로 변환&#10;private val chartPoints = sampleData.mapIndexed { index, value -&gt;&#10;    ChartPoint(&#10;        x = index.toFloat(),&#10;        y = value,&#10;        label = weekDays.getOrElse(index) { &quot;&quot; }&#10;    )&#10;}&#10;&#10;private val chartPoint2 = sampleData2.mapIndexed { index, value -&gt;&#10;    ChartPoint(&#10;        x = index.toFloat(),&#10;        y = value,&#10;        label = weekDays.getOrElse(index) { &quot;&quot; }&#10;    )&#10;}&#10;&#10;private val chartPoint3 = sampleData3.mapIndexed { index, value -&gt;&#10;    ChartPoint(&#10;        x = index.toFloat(),&#10;        y = value,&#10;        label = weekDays.getOrElse(index) { &quot;&quot; }&#10;    )&#10;}&#10;&#10;&#10;@Composable&#10;fun ExampleUI(modifier: Modifier = Modifier) {&#10;    val chartType = listOf(&#10;        &quot;BarChart 1&quot;,&#10;        &quot;BarChart 2&quot;,&#10;        &quot;DonutChart 1&quot;,&#10;        &quot;LineChart 1&quot;,&#10;        &quot;LineChart 2&quot;,&#10;        &quot;PieChart 1&quot;,&#10;        &quot;CalendarChart 1&quot;,&#10;        &quot;CalendarChart 2&quot;,&#10;        &quot;ScatterPlot 1&quot;,&#10;        &quot;Minimal Bar Chart&quot;,&#10;        &quot;Minimal Line Chart&quot;,&#10;    )&#10;&#10;    var selectedChartType by remember { mutableStateOf&lt;String?&gt;(&quot;Minimal Bar Chart&quot;) }&#10;&#10;    Column(modifier = modifier.fillMaxSize().padding(16.dp)) {&#10;        if (selectedChartType == null) {&#10;            chartType.forEach { type -&gt;&#10;                Text(&#10;                    text = type,&#10;                    modifier = Modifier&#10;                        .padding(12.dp)&#10;                        .clickable { selectedChartType = type }&#10;                )&#10;            }&#10;        } else {&#10;&#10;            IconButton(&#10;                onClick = { selectedChartType = null },&#10;                modifier = Modifier&#10;                    .padding(top = 16.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Close,&#10;                    contentDescription = &quot;Close&quot;,&#10;                    tint = Color.Black,&#10;                    modifier = Modifier.size(32.dp) // 아이콘 크기 조정&#10;&#10;                )&#10;            }&#10;&#10;            when (selectedChartType) {&#10;                &quot;BarChart 1&quot; -&gt; BarChart_1()&#10;                &quot;BarChart 2&quot; -&gt; BarChart_2()&#10;                &quot;DonutChart 1&quot; -&gt; DonutChart_1()&#10;                &quot;LineChart 1&quot; -&gt; LineChart_1()&#10;                &quot;LineChart 2&quot; -&gt; LineChart_2()&#10;                &quot;PieChart 1&quot; -&gt; PieChart_1()&#10;                &quot;CalendarChart 1&quot; -&gt; ChalendarChart_1()&#10;                &quot;CalendarChart 2&quot; -&gt; ChalendarChart_2()&#10;                &quot;ScatterPlot 1&quot; -&gt; ScatterPlot_1()&#10;                &quot;Minimal Bar Chart&quot; -&gt; Minimal_BarChart() // Placeholder for minimal bar chart&#10;                &quot;Minimal Line Chart&quot; -&gt; Minimal_LineChart() // Placeholder for minimal line chart&#10;                else -&gt; Text(&quot;Unknown Chart Type&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BarChart_1() {&#10;    BarChart(&#10;        modifier = Modifier.fillMaxWidth().height(250.dp),&#10;        data = chartPoints,&#10;        xLabel = &quot;Week&quot;,&#10;        yLabel = &quot;Value&quot;,&#10;        title = &quot;Weekly Data&quot;,&#10;        barColor = Primary_Purple,&#10;//        width = 250.dp,&#10;//        height = 250.dp,&#10;        minY = 2f,&#10;        maxY = 60f,&#10;        barWidthRatio = 0.5f,&#10;        labelTextSize = 28f,&#10;        tooltipTextSize = 32f,&#10;        interactionType = InteractionType.BAR&#10;    )&#10;}&#10;&#10;@Composable&#10;fun BarChart_2() {&#10;    Text(&quot;Displaying BarChart 2&quot;)&#10;}&#10;&#10;@Composable&#10;fun DonutChart_1() {&#10;    PieChart(&#10;        modifier = Modifier.fillMaxWidth().height(250.dp),&#10;        data = chartPoints.subList(0, 4),&#10;        title = &quot;요일별 활동량&quot;,&#10;        isDonut = true,&#10;        colors = listOf(Primary_Purple, Teel, Orange, Yellow),&#10;        showLegend = true,&#10;        showLabel = true&#10;    )&#10;}&#10;&#10;@Composable&#10;fun LineChart_1() {&#10;    Box(modifier = Modifier.fillMaxWidth().height(250.dp)) {&#10;&#10;        LineChart(&#10;            modifier = Modifier.fillMaxWidth().height(250.dp),&#10;            data = chartPoints,&#10;            title = &quot;요일별 활동량&quot;,&#10;            yLabel = &quot;활동량&quot;,&#10;            xLabel = &quot;요일&quot;,&#10;            lineColor = Primary_Purple,&#10;            strokeWidth = 4f,&#10;            minY = 0f,&#10;            maxY = 60f,&#10;            interactionType = InteractionType.POINT,&#10;        )&#10;        LineChart(&#10;            modifier = Modifier.fillMaxWidth().height(250.dp),&#10;            data = chartPoint2,&#10;            title = &quot;요일별 활동량&quot;,&#10;            yLabel = &quot;활동량&quot;,&#10;            xLabel = &quot;요일&quot;,&#10;            lineColor = Teel,&#10;            strokeWidth = 4f,&#10;            minY = 0f,&#10;            maxY = 60f,&#10;            interactionType = InteractionType.POINT,&#10;        )&#10;        LineChart(&#10;            modifier = Modifier.fillMaxWidth().height(250.dp),&#10;            data = chartPoint3,&#10;            title = &quot;요일별 활동량&quot;,&#10;            yLabel = &quot;활동량&quot;,&#10;            xLabel = &quot;요일&quot;,&#10;            lineColor = Orange,&#10;            strokeWidth = 4f,&#10;            minY = 0f,&#10;            maxY = 60f,&#10;            interactionType = InteractionType.POINT,&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LineChart_2() {&#10;    LineChart(&#10;        modifier = Modifier.fillMaxWidth().height(250.dp),&#10;        data = chartPoints,&#10;        title = &quot;요일별 활동량&quot;,&#10;        yLabel = &quot;활동량&quot;,&#10;        xLabel = &quot;요일&quot;,&#10;        lineColor = Primary_Purple,&#10;        showPoint = true,&#10;        strokeWidth = 4f,&#10;        minY = 0f,&#10;        maxY = 60f,&#10;        interactionType = InteractionType.NEAR_X_AXIS,&#10;    )&#10;}&#10;&#10;@Composable&#10;fun PieChart_1() {&#10;    PieChart(&#10;        modifier = Modifier.fillMaxWidth().height(500.dp),&#10;        data = chartPoints.subList(0, 4),&#10;        title = &quot;요일별 활동량&quot;,&#10;        isDonut = false,&#10;        colors = listOf(Primary_Purple, Teel, Orange, Yellow),&#10;        showLegend = true,&#10;        legendPosition = LegendPosition.RIGHT&#10;&#10;    )&#10;}&#10;&#10;@Composable&#10;fun ChalendarChart_1() {&#10;    CalendarChart(&#10;        modifier = Modifier.fillMaxWidth().height(600.dp),&#10;        entries = entries,&#10;        yearMonth = yearMonth,&#10;        color = Primary_Purple,&#10;        maxBubbleSize = 10f,&#10;        minBubbleSize = 6f&#10;    )&#10;}&#10;&#10;@Composable&#10;fun ChalendarChart_2() {&#10;    CalendarChart(&#10;        modifier = Modifier.width(300.dp).height(200.dp),&#10;        entries = entries,&#10;        yearMonth = yearMonth,&#10;        color = Primary_Purple,&#10;        bubbleType = BubbleType.RECTANGLE,&#10;        maxBubbleSize = 10f,&#10;        minBubbleSize = 6f&#10;    )&#10;}&#10;&#10;@Composable&#10;fun ScatterPlot_1() {&#10;    ScatterPlot(&#10;        modifier = Modifier.fillMaxWidth().height(500.dp),&#10;        data = chartPoints,&#10;        title = &quot;요일별 활동량&quot;,&#10;        yLabel = &quot;활동량&quot;,&#10;        xLabel = &quot;요일&quot;,&#10;        interactionType = InteractionType.NEAR_X_AXIS&#10;    )&#10;}&#10;&#10;@Composable&#10;fun Minimal_BarChart() {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;        shape = androidx.compose.material3.MaterialTheme.shapes.medium,&#10;        elevation = androidx.compose.material3.CardDefaults.cardElevation(2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp, vertical = 12.dp),&#10;            horizontalArrangement = androidx.compose.foundation.layout.Arrangement.SpaceBetween&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = &quot;오늘 운동&quot;,&#10;                    color = Color(0xFF222222),&#10;                    fontSize = androidx.compose.ui.unit.sp(15),&#10;                    letterSpacing = 0.2.sp&#10;                )&#10;                Spacer(Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;1시간 20분&quot;,&#10;                    color = Color(0xFF00C7BE),&#10;                    fontSize = androidx.compose.ui.unit.sp(22),&#10;                    fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold,&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;            }&#10;            Box(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(start = 16.dp)&#10;                    .height(36.dp)&#10;                    .align(androidx.compose.ui.Alignment.CenterVertically)&#10;            ) {&#10;                MinimalBarChart(&#10;                    data = sampleData,&#10;                    color = Color(0xFF00C7BE),&#10;                    width = 110.dp,&#10;                    height = 36.dp,&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Minimal_LineChart() {&#10;    // Placeholder for minimal line chart&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hdil/saluschart/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hdil/saluschart/MainActivity.kt" />
              <option name="originalContent" value="package com.hdil.saluschart&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SegmentedButtonDefaults.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.hdil.saluschart.core.chart.ChartPoint&#10;import com.hdil.saluschart.ui.compose.charts.LineChart&#10;import com.hdil.saluschart.ui.compose.charts.ScatterPlot&#10;import com.hdil.saluschart.ui.theme.SalusChartTheme&#10;import androidx.compose.material3.SegmentedButton&#10;import androidx.compose.material3.SegmentedButtonDefaults&#10;import androidx.compose.material3.SingleChoiceSegmentedButtonRow&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.ui.graphics.Color&#10;import com.hdil.saluschart.core.chart.InteractionType&#10;import com.hdil.saluschart.ui.compose.charts.BarChart&#10;import com.hdil.saluschart.ui.compose.charts.CalendarChart&#10;import com.hdil.saluschart.ui.compose.charts.CalendarEntry&#10;import com.hdil.saluschart.ui.compose.charts.PieChart&#10;import com.hdil.saluschart.ui.compose.charts.RangeBarChart&#10;import com.hdil.saluschart.ui.compose.charts.StackedBarChart&#10;import com.hdil.saluschart.core.chart.StackedChartPoint&#10;import java.time.LocalDate&#10;import java.time.YearMonth&#10;&#10;&#10;import kotlin.text.toInt&#10;import com.hdil.saluschart.core.chart.ProgressChartPoint&#10;import com.hdil.saluschart.ui.compose.charts.ProgressChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalBarChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalLineChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalRangeBarChart&#10;import com.hdil.saluschart.core.chart.RangeChartPoint&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            SalusChartTheme {&#10;//                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;//                    SampleCharts(&#10;//                        modifier = Modifier.padding(innerPadding)&#10;//                    )&#10;//                }&#10;                Surface {&#10;                    ExampleUI(&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun SampleCharts(modifier: Modifier = Modifier) {&#10;    // 차트 타입 선택 상태 관리&#10;    var selectedChartType by remember { mutableStateOf(&quot;Line&quot;) }&#10;    &#10;    // 프로그레스 차트 모드 선택 상태 관리 (도넛 vs 바)&#10;    var isProgressDonut by remember { mutableStateOf(true) }&#10;&#10;//    // 현재 연월과 랜덤 데이터 생성&#10;    val yearMonth = YearMonth.now()&#10;//    val random = java.util.Random(0)&#10;//    val entries = (1..28).map { day -&gt;&#10;//        val date = yearMonth.atDay(day)&#10;//        val value = random.nextFloat() * 100&#10;//        CalendarEntry(&#10;//            date = date,&#10;//            value = value,&#10;//            color = if (random.nextBoolean()) null else Color.Green&#10;//        )&#10;//    }&#10;    val startDate = LocalDate.of(yearMonth.year, 6, 1)&#10;    val endDate = LocalDate.of(yearMonth.year, 7, 15)&#10;    val random = java.util.Random(0)&#10;    val entries = generateSequence(startDate) { date -&gt;&#10;        if (date.isBefore(endDate)) date.plusDays(1) else null&#10;    }.map { date -&gt;&#10;        val value = random.nextFloat() * 100&#10;        CalendarEntry(&#10;            date = date,&#10;            value = value,&#10;            color = if (random.nextBoolean()) null else Color.Green&#10;        )&#10;    }.toList()&#10;&#10;    // 기본적인 raw 데이터로 차트 그리기&#10;    val sampleData = listOf(10f, 25f, 40f, 20f, 35f, 55f, 45f)&#10;    val weekDays = listOf(&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;)&#10;&#10;    // 드롭다운 메뉴를 위한 상태 관리&#10;    var widthExpanded by remember { mutableStateOf(false) }&#10;    var heightExpanded by remember { mutableStateOf(false) }&#10;&#10;    val widthOptions = listOf(50.dp, 100.dp, 150.dp, 200.dp, 250.dp, 300.dp, 350.dp)&#10;    val heightOptions = listOf(50.dp, 100.dp, 150.dp, 200.dp, 250.dp, 300.dp, 350.dp)&#10;&#10;    var selectedWidth by remember { mutableStateOf(widthOptions.last()) }&#10;    var selectedHeight by remember { mutableStateOf(heightOptions.last()) }&#10;&#10;    Column(&#10;        modifier = modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // 차트 타입 선택 토글 버튼&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            SingleChoiceSegmentedButtonRow {&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Line&quot;,&#10;                    onClick = { selectedChartType = &quot;Line&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 11),&#10;                    label = { Text(&quot;Line&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Scatter&quot;,&#10;                    onClick = { selectedChartType = &quot;Scatter&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 11),&#10;                    label = { Text(&quot;Scatter&quot;, fontSize = 6.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Bar&quot;,&#10;                    onClick = { selectedChartType = &quot;Bar&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 2, count = 11),&#10;                    label = { Text(&quot;Bar&quot;, fontSize = 8.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Stacked&quot;,&#10;                    onClick = { selectedChartType = &quot;Stacked&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 3, count = 11),&#10;                    label = { Text(&quot;Stacked&quot;, fontSize = 6.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Range&quot;,&#10;                    onClick = { selectedChartType = &quot;Range&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 4, count = 11),&#10;                    label = { Text(&quot;Range&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Pie&quot;,&#10;                    onClick = { selectedChartType = &quot;Pie&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 5, count = 11),&#10;                    label = { Text(&quot;Pie&quot;, fontSize = 8.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Progress&quot;,&#10;                    onClick = { selectedChartType = &quot;Progress&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 6, count = 11),&#10;                    label = { Text(&quot;Progress&quot;, fontSize = 5.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Calendar&quot;,&#10;                    onClick = { selectedChartType = &quot;Calendar&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 7, count = 11),&#10;                    label = { Text(&quot;Calendar&quot;, fontSize = 6.sp) }&#10;                )&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            SingleChoiceSegmentedButtonRow {&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;MinBar&quot;,&#10;                    onClick = { selectedChartType = &quot;MinBar&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 3),&#10;                    label = { Text(&quot;Minimal Bar&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;MinLine&quot;,&#10;                    onClick = { selectedChartType = &quot;MinLine&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 3),&#10;                    label = { Text(&quot;Minimal Line&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;MinRange&quot;,&#10;                    onClick = { selectedChartType = &quot;MinRange&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 2, count = 3),&#10;                    label = { Text(&quot;Minimal Range&quot;, fontSize = 7.sp) }&#10;                )&#10;            }&#10;        }&#10;&#10;        // 프로그레스 차트 모드 토글 (프로그레스 차트 선택 시에만 표시)&#10;        if (selectedChartType == &quot;Progress&quot;) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = androidx.compose.ui.Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Bar Mode&quot;)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isProgressDonut,&#10;                    onCheckedChange = { isProgressDonut = it }&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Donut Mode&quot;)&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Width 드롭다운&#10;            Column {&#10;                Box {&#10;                    OutlinedButton(&#10;                        onClick = { widthExpanded = !widthExpanded },&#10;                    ) {&#10;                        Text(&quot;차트 너비: ${selectedWidth.value.toInt()}dp&quot;)&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = widthExpanded,&#10;                        onDismissRequest = { widthExpanded = false },&#10;                        modifier = Modifier.fillMaxWidth(0.7f)&#10;                    ) {&#10;                        widthOptions.forEach { option -&gt;&#10;                            DropdownMenuItem(&#10;                                text = { Text(&quot;${option.value.toInt()}dp&quot;) },&#10;                                onClick = {&#10;                                    selectedWidth = option&#10;                                    widthExpanded = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Height 드롭다운&#10;            Column {&#10;                Box {&#10;                    OutlinedButton(&#10;                        onClick = { heightExpanded = !heightExpanded },&#10;                    ) {&#10;                        Text(&quot;차트 높이: ${selectedHeight.value.toInt()}dp&quot;)&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = heightExpanded,&#10;                        onDismissRequest = { heightExpanded = false },&#10;                        modifier = Modifier.fillMaxWidth(0.7f)&#10;                    ) {&#10;                        heightOptions.forEach { option -&gt;&#10;                            DropdownMenuItem(&#10;                                text = { Text(&quot;${option.value.toInt()}dp&quot;) },&#10;                                onClick = {&#10;                                    selectedHeight = option&#10;                                    heightExpanded = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // ChartPoint 리스트로 변환&#10;        val chartPoints = sampleData.mapIndexed { index, value -&gt;&#10;            ChartPoint(&#10;                x = index.toFloat(),&#10;                y = value,&#10;                label = weekDays.getOrElse(index) { &quot;&quot; }&#10;            )&#10;        }&#10;&#10;        // 범위 차트용 샘플 데이터 (심박수 범위 예시)&#10;        val rangeData = listOf(&#10;            RangeChartPoint(x = 0f, yMin = 54f, yMax = 160f, label = &quot;2일&quot;),&#10;            RangeChartPoint(x = 1f, yMin = 65f, yMax = 145f, label = &quot;3일&quot;),&#10;            RangeChartPoint(x = 2f, yMin = 58f, yMax = 125f, label = &quot;4일&quot;),&#10;            RangeChartPoint(x = 3f, yMin = 75f, yMax = 110f, label = &quot;6일&quot;),&#10;            RangeChartPoint(x = 4f, yMin = 68f, yMax = 162f, label = &quot;7일&quot;),&#10;            RangeChartPoint(x = 5f, yMin = 72f, yMax = 168f, label = &quot;8일&quot;),&#10;            RangeChartPoint(x = 6f, yMin = 65f, yMax = 138f, label = &quot;9일&quot;),&#10;            RangeChartPoint(x = 7f, yMin = 85f, yMax = 105f, label = &quot;10일&quot;)&#10;        )&#10;&#10;        // 스택 바 차트용 샘플 데이터 (일별 영양소 섭취량 예시)&#10;        val stackedData = listOf(&#10;            StackedChartPoint(&#10;                x = 0f,&#10;                values = listOf(80f, 45f, 120f), // 단백질, 지방, 탄수화물 (g)&#10;                label = &quot;월&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 1f,&#10;                values = listOf(75f, 38f, 110f),&#10;                label = &quot;화&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 2f,&#10;                values = listOf(90f, 52f, 140f),&#10;                label = &quot;수&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 3f,&#10;                values = listOf(85f, 41f, 135f),&#10;                label = &quot;목&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 4f,&#10;                values = listOf(95f, 58f, 150f),&#10;                label = &quot;금&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 5f,&#10;                values = listOf(70f, 35f, 100f),&#10;                label = &quot;토&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 6f,&#10;                values = listOf(88f, 48f, 125f),&#10;                label = &quot;일&quot;&#10;            )&#10;        )&#10;&#10;        // 스택 바 차트용 세그먼트 레이블 (한 번만 정의)&#10;        val segmentLabels = listOf(&quot;단백질&quot;, &quot;지방&quot;, &quot;탄수화물&quot;)&#10;&#10;        // 선택된 차트 타입에 따라 다른 차트 표시&#10;        when (selectedChartType) {&#10;            &quot;Line&quot; -&gt; {&#10;                LineChart(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    yLabel = &quot;활동량&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;&#10;                    strokeWidth = 10f,&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Scatter&quot; -&gt; {&#10;                ScatterPlot(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    yLabel = &quot;활동량&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;                    width = selectedWidth,&#10;                    height = selectedHeight,&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Bar&quot; -&gt; {&#10;                BarChart(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    yLabel = &quot;활동량&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;                    minY = 2f,&#10;                    maxY = 108f,&#10;//                    width = selectedWidth,&#10;//                    height = selectedHeight,&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Stacked&quot; -&gt; {&#10;                StackedBarChart(&#10;                    data = stackedData,&#10;                    segmentLabels = segmentLabels,&#10;                    title = &quot;요일별 영양소 섭취량&quot;,&#10;                    yLabel = &quot;영양소 (g)&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;                    width = selectedWidth,&#10;                    height = selectedHeight,&#10;                    showLegend = true,&#10;                    colors = listOf(&#10;                        Color(0xFF2196F3), // 파랑 (단백질)&#10;                        Color(0xFFFF9800), // 주황 (지방) &#10;                        Color(0xFF4CAF50)  // 초록 (탄수화물)&#10;                    )&#10;                )&#10;            }&#10;            &quot;Range&quot; -&gt; {&#10;                RangeBarChart(&#10;                    data = rangeData,&#10;                    title = &quot;일별 심박수 범위&quot;,&#10;                    yLabel = &quot;심박수 (bpm)&quot;,&#10;                    xLabel = &quot;날짜&quot;,&#10;                    width = selectedWidth,&#10;                    height = selectedHeight,&#10;                    barColor = Color(0xFFFF9800),&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Pie&quot; -&gt; {&#10;                PieChart(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    isDonut = true,&#10;                    showLegend = true,&#10;                )&#10;            }&#10;            &quot;Progress&quot; -&gt; {&#10;                 val progressData = listOf(&#10;                     ProgressChartPoint(&#10;                         x = 0f,&#10;                         current = 1200f,&#10;                         max = 2000f,&#10;                         label = &quot;Move&quot;,&#10;                         unit = &quot;KJ&quot;&#10;                     ),&#10;                     ProgressChartPoint(&#10;                         x = 1f,&#10;                         current = 20f,&#10;                         max = 60f,&#10;                         label = &quot;Exercise&quot;,&#10;                         unit = &quot;min&quot;&#10;                     ),&#10;                     ProgressChartPoint(&#10;                         x = 2f,&#10;                         current = 7f,&#10;                         max = 10f,&#10;                         label = &quot;Stand&quot;,&#10;                         unit = &quot;h&quot;&#10;                     )&#10;                 )&#10;                 ProgressChart(&#10;                     data = progressData,&#10;                     title = &quot;일일 활동 진행률&quot;,&#10;                     isDonut = isProgressDonut,&#10;                     isPercentage = false,&#10;                     width = selectedWidth,&#10;                     height = selectedHeight,&#10;                     colors = listOf(&#10;                         Color(0xFF00C7BE), // 청록색 (Move)&#10;                         Color(0xFFFF6B35), // 주황색 (Exercise)&#10;                         Color(0xFF3A86FF)  // 파란색 (Stand)&#10;                     )&#10;                 )&#10;             }&#10;            &quot;Calendar&quot; -&gt; {&#10;                CalendarChart(&#10;                    entries = entries,&#10;                    yearMonth = yearMonth,&#10;&#10;                )&#10;            }&#10;                         &quot;MinBar&quot; -&gt; {&#10;                 MinimalBarChart(&#10;                     data = sampleData,&#10;                     color = Color.Blue,&#10;                     width = selectedWidth,&#10;                     height = selectedHeight&#10;                 )&#10;             }&#10;             &quot;MinLine&quot; -&gt; {&#10;                 MinimalLineChart(&#10;                     data = chartPoints,&#10;                     color = Color.Blue,&#10;                     width = selectedWidth,&#10;                     height = selectedHeight,&#10;                     showPoints = true&#10;                 )&#10;             }&#10;             &quot;MinRange&quot; -&gt; {&#10;                 // 단일 범위 데이터 생성 (심박수 범위 예시: 76-104 bpm)&#10;                 val singleRangeData = RangeChartPoint(&#10;                     x = 0f,&#10;                     yMin = 76f,&#10;                     yMax = 104f,&#10;                     label = &quot;Heart Rate&quot;&#10;                 )&#10;                 MinimalRangeBarChart(&#10;                     data = singleRangeData,&#10;                     containerMin = 60f,  // 정상 심박수 범위 시작&#10;                     containerMax = 120f, // 정상 심박수 범위 끝&#10;                     containerColor = Color.LightGray,&#10;                     rangeColor = Color(0xFFFF9500),&#10;                     width = selectedWidth,&#10;                     height = selectedHeight&#10;                 )&#10;             }&#10;&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ChartPreview() {&#10;    SalusChartTheme {&#10;        SampleCharts()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.hdil.saluschart&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SegmentedButtonDefaults.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.hdil.saluschart.core.chart.ChartPoint&#10;import com.hdil.saluschart.ui.compose.charts.LineChart&#10;import com.hdil.saluschart.ui.compose.charts.ScatterPlot&#10;import com.hdil.saluschart.ui.theme.SalusChartTheme&#10;import androidx.compose.material3.SegmentedButton&#10;import androidx.compose.material3.SegmentedButtonDefaults&#10;import androidx.compose.material3.SingleChoiceSegmentedButtonRow&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.ui.graphics.Color&#10;import com.hdil.saluschart.core.chart.InteractionType&#10;import com.hdil.saluschart.ui.compose.charts.BarChart&#10;import com.hdil.saluschart.ui.compose.charts.CalendarChart&#10;import com.hdil.saluschart.ui.compose.charts.CalendarEntry&#10;import com.hdil.saluschart.ui.compose.charts.PieChart&#10;import com.hdil.saluschart.ui.compose.charts.RangeBarChart&#10;import com.hdil.saluschart.ui.compose.charts.StackedBarChart&#10;import com.hdil.saluschart.core.chart.StackedChartPoint&#10;import java.time.LocalDate&#10;import java.time.YearMonth&#10;&#10;&#10;import kotlin.text.toInt&#10;import com.hdil.saluschart.core.chart.ProgressChartPoint&#10;import com.hdil.saluschart.ui.compose.charts.ProgressChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalBarChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalLineChart&#10;import com.hdil.saluschart.ui.compose.charts.MinimalRangeBarChart&#10;import com.hdil.saluschart.core.chart.RangeChartPoint&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            SalusChartTheme {&#10;//                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;//                    SampleCharts(&#10;//                        modifier = Modifier.padding(innerPadding)&#10;//                    )&#10;//                }&#10;                Surface {&#10;                    ExampleUI(&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun SampleCharts(modifier: Modifier = Modifier) {&#10;    // 차트 타입 선택 상태 관리&#10;    var selectedChartType by remember { mutableStateOf(&quot;Line&quot;) }&#10;    &#10;    // 프로그레스 차트 모드 선택 상태 관리 (도넛 vs 바)&#10;    var isProgressDonut by remember { mutableStateOf(true) }&#10;&#10;//    // 현재 연월과 랜덤 데이터 생성&#10;    val yearMonth = YearMonth.now()&#10;//    val random = java.util.Random(0)&#10;//    val entries = (1..28).map { day -&gt;&#10;//        val date = yearMonth.atDay(day)&#10;//        val value = random.nextFloat() * 100&#10;//        CalendarEntry(&#10;//            date = date,&#10;//            value = value,&#10;//            color = if (random.nextBoolean()) null else Color.Green&#10;//        )&#10;//    }&#10;    val startDate = LocalDate.of(yearMonth.year, 6, 1)&#10;    val endDate = LocalDate.of(yearMonth.year, 7, 15)&#10;    val random = java.util.Random(0)&#10;    val entries = generateSequence(startDate) { date -&gt;&#10;        if (date.isBefore(endDate)) date.plusDays(1) else null&#10;    }.map { date -&gt;&#10;        val value = random.nextFloat() * 100&#10;        CalendarEntry(&#10;            date = date,&#10;            value = value,&#10;            color = if (random.nextBoolean()) null else Color.Green&#10;        )&#10;    }.toList()&#10;&#10;    // 기본적인 raw 데이터로 차트 그리기&#10;    val sampleData = listOf(10f, 25f, 40f, 20f, 35f, 55f, 45f)&#10;    val weekDays = listOf(&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;)&#10;&#10;    // 드롭다운 메뉴를 위한 상태 관리&#10;    var widthExpanded by remember { mutableStateOf(false) }&#10;    var heightExpanded by remember { mutableStateOf(false) }&#10;&#10;    val widthOptions = listOf(50.dp, 100.dp, 150.dp, 200.dp, 250.dp, 300.dp, 350.dp)&#10;    val heightOptions = listOf(50.dp, 100.dp, 150.dp, 200.dp, 250.dp, 300.dp, 350.dp)&#10;&#10;    var selectedWidth by remember { mutableStateOf(widthOptions.last()) }&#10;    var selectedHeight by remember { mutableStateOf(heightOptions.last()) }&#10;&#10;    Column(&#10;        modifier = modifier.padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // 차트 타입 선택 토글 버튼&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            SingleChoiceSegmentedButtonRow {&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Line&quot;,&#10;                    onClick = { selectedChartType = &quot;Line&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 11),&#10;                    label = { Text(&quot;Line&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Scatter&quot;,&#10;                    onClick = { selectedChartType = &quot;Scatter&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 11),&#10;                    label = { Text(&quot;Scatter&quot;, fontSize = 6.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Bar&quot;,&#10;                    onClick = { selectedChartType = &quot;Bar&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 2, count = 11),&#10;                    label = { Text(&quot;Bar&quot;, fontSize = 8.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Stacked&quot;,&#10;                    onClick = { selectedChartType = &quot;Stacked&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 3, count = 11),&#10;                    label = { Text(&quot;Stacked&quot;, fontSize = 6.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Range&quot;,&#10;                    onClick = { selectedChartType = &quot;Range&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 4, count = 11),&#10;                    label = { Text(&quot;Range&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Pie&quot;,&#10;                    onClick = { selectedChartType = &quot;Pie&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 5, count = 11),&#10;                    label = { Text(&quot;Pie&quot;, fontSize = 8.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Progress&quot;,&#10;                    onClick = { selectedChartType = &quot;Progress&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 6, count = 11),&#10;                    label = { Text(&quot;Progress&quot;, fontSize = 5.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;Calendar&quot;,&#10;                    onClick = { selectedChartType = &quot;Calendar&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 7, count = 11),&#10;                    label = { Text(&quot;Calendar&quot;, fontSize = 6.sp) }&#10;                )&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            SingleChoiceSegmentedButtonRow {&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;MinBar&quot;,&#10;                    onClick = { selectedChartType = &quot;MinBar&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 3),&#10;                    label = { Text(&quot;Minimal Bar&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;MinLine&quot;,&#10;                    onClick = { selectedChartType = &quot;MinLine&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 3),&#10;                    label = { Text(&quot;Minimal Line&quot;, fontSize = 7.sp) }&#10;                )&#10;                SegmentedButton(&#10;                    selected = selectedChartType == &quot;MinRange&quot;,&#10;                    onClick = { selectedChartType = &quot;MinRange&quot; },&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 2, count = 3),&#10;                    label = { Text(&quot;Minimal Range&quot;, fontSize = 7.sp) }&#10;                )&#10;            }&#10;        }&#10;&#10;        // 프로그레스 차트 모드 토글 (프로그레스 차트 선택 시에만 표시)&#10;        if (selectedChartType == &quot;Progress&quot;) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = androidx.compose.ui.Alignment.CenterVertically&#10;            ) {&#10;                Text(&quot;Bar Mode&quot;)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Switch(&#10;                    checked = isProgressDonut,&#10;                    onCheckedChange = { isProgressDonut = it }&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Donut Mode&quot;)&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Width 드롭다운&#10;            Column {&#10;                Box {&#10;                    OutlinedButton(&#10;                        onClick = { widthExpanded = !widthExpanded },&#10;                    ) {&#10;                        Text(&quot;차트 너비: ${selectedWidth.value.toInt()}dp&quot;)&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = widthExpanded,&#10;                        onDismissRequest = { widthExpanded = false },&#10;                        modifier = Modifier.fillMaxWidth(0.7f)&#10;                    ) {&#10;                        widthOptions.forEach { option -&gt;&#10;                            DropdownMenuItem(&#10;                                text = { Text(&quot;${option.value.toInt()}dp&quot;) },&#10;                                onClick = {&#10;                                    selectedWidth = option&#10;                                    widthExpanded = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Height 드롭다운&#10;            Column {&#10;                Box {&#10;                    OutlinedButton(&#10;                        onClick = { heightExpanded = !heightExpanded },&#10;                    ) {&#10;                        Text(&quot;차트 높이: ${selectedHeight.value.toInt()}dp&quot;)&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = heightExpanded,&#10;                        onDismissRequest = { heightExpanded = false },&#10;                        modifier = Modifier.fillMaxWidth(0.7f)&#10;                    ) {&#10;                        heightOptions.forEach { option -&gt;&#10;                            DropdownMenuItem(&#10;                                text = { Text(&quot;${option.value.toInt()}dp&quot;) },&#10;                                onClick = {&#10;                                    selectedHeight = option&#10;                                    heightExpanded = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // ChartPoint 리스트로 변환&#10;        val chartPoints = sampleData.mapIndexed { index, value -&gt;&#10;            ChartPoint(&#10;                x = index.toFloat(),&#10;                y = value,&#10;                label = weekDays.getOrElse(index) { &quot;&quot; }&#10;            )&#10;        }&#10;&#10;        // 범위 차트용 샘플 데이터 (심박수 범위 예시)&#10;        val rangeData = listOf(&#10;            RangeChartPoint(x = 0f, yMin = 54f, yMax = 160f, label = &quot;2일&quot;),&#10;            RangeChartPoint(x = 1f, yMin = 65f, yMax = 145f, label = &quot;3일&quot;),&#10;            RangeChartPoint(x = 2f, yMin = 58f, yMax = 125f, label = &quot;4일&quot;),&#10;            RangeChartPoint(x = 3f, yMin = 75f, yMax = 110f, label = &quot;6일&quot;),&#10;            RangeChartPoint(x = 4f, yMin = 68f, yMax = 162f, label = &quot;7일&quot;),&#10;            RangeChartPoint(x = 5f, yMin = 72f, yMax = 168f, label = &quot;8일&quot;),&#10;            RangeChartPoint(x = 6f, yMin = 65f, yMax = 138f, label = &quot;9일&quot;),&#10;            RangeChartPoint(x = 7f, yMin = 85f, yMax = 105f, label = &quot;10일&quot;)&#10;        )&#10;&#10;        // 스택 바 차트용 샘플 데이터 (일별 영양소 섭취량 예시)&#10;        val stackedData = listOf(&#10;            StackedChartPoint(&#10;                x = 0f,&#10;                values = listOf(80f, 45f, 120f), // 단백질, 지방, 탄수화물 (g)&#10;                label = &quot;월&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 1f,&#10;                values = listOf(75f, 38f, 110f),&#10;                label = &quot;화&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 2f,&#10;                values = listOf(90f, 52f, 140f),&#10;                label = &quot;수&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 3f,&#10;                values = listOf(85f, 41f, 135f),&#10;                label = &quot;목&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 4f,&#10;                values = listOf(95f, 58f, 150f),&#10;                label = &quot;금&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 5f,&#10;                values = listOf(70f, 35f, 100f),&#10;                label = &quot;토&quot;&#10;            ),&#10;            StackedChartPoint(&#10;                x = 6f,&#10;                values = listOf(88f, 48f, 125f),&#10;                label = &quot;일&quot;&#10;            )&#10;        )&#10;&#10;        // 스택 바 차트용 세그먼트 레이블 (한 번만 정의)&#10;        val segmentLabels = listOf(&quot;단백질&quot;, &quot;지방&quot;, &quot;탄수화물&quot;)&#10;&#10;        // 선택된 차트 타입에 따라 다른 차트 표시&#10;        when (selectedChartType) {&#10;            &quot;Line&quot; -&gt; {&#10;                LineChart(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    yLabel = &quot;활동량&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;&#10;                    strokeWidth = 10f,&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Scatter&quot; -&gt; {&#10;                ScatterPlot(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    yLabel = &quot;활동량&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;                    width = selectedWidth,&#10;                    height = selectedHeight,&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Bar&quot; -&gt; {&#10;                BarChart(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    yLabel = &quot;활동량&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;                    minY = 2f,&#10;                    maxY = 108f,&#10;//                    width = selectedWidth,&#10;//                    height = selectedHeight,&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Stacked&quot; -&gt; {&#10;                StackedBarChart(&#10;                    data = stackedData,&#10;                    segmentLabels = segmentLabels,&#10;                    title = &quot;요일별 영양소 섭취량&quot;,&#10;                    yLabel = &quot;영양소 (g)&quot;,&#10;                    xLabel = &quot;요일&quot;,&#10;                    width = selectedWidth,&#10;                    height = selectedHeight,&#10;                    showLegend = true,&#10;                    colors = listOf(&#10;                        Color(0xFF2196F3), // 파랑 (단백질)&#10;                        Color(0xFFFF9800), // 주황 (지방) &#10;                        Color(0xFF4CAF50)  // 초록 (탄수화물)&#10;                    )&#10;                )&#10;            }&#10;            &quot;Range&quot; -&gt; {&#10;                RangeBarChart(&#10;                    data = rangeData,&#10;                    title = &quot;일별 심박수 범위&quot;,&#10;                    yLabel = &quot;심박수 (bpm)&quot;,&#10;                    xLabel = &quot;날짜&quot;,&#10;                    width = selectedWidth,&#10;                    height = selectedHeight,&#10;                    barColor = Color(0xFFFF9800),&#10;                    interactionType = InteractionType.NEAR_X_AXIS&#10;                )&#10;            }&#10;            &quot;Pie&quot; -&gt; {&#10;                PieChart(&#10;                    data = chartPoints,&#10;                    title = &quot;요일별 활동량&quot;,&#10;                    isDonut = true,&#10;                    showLegend = true,&#10;                )&#10;            }&#10;            &quot;Progress&quot; -&gt; {&#10;                 val progressData = listOf(&#10;                     ProgressChartPoint(&#10;                         x = 0f,&#10;                         current = 1200f,&#10;                         max = 2000f,&#10;                         label = &quot;Move&quot;,&#10;                         unit = &quot;KJ&quot;&#10;                     ),&#10;                     ProgressChartPoint(&#10;                         x = 1f,&#10;                         current = 20f,&#10;                         max = 60f,&#10;                         label = &quot;Exercise&quot;,&#10;                         unit = &quot;min&quot;&#10;                     ),&#10;                     ProgressChartPoint(&#10;                         x = 2f,&#10;                         current = 7f,&#10;                         max = 10f,&#10;                         label = &quot;Stand&quot;,&#10;                         unit = &quot;h&quot;&#10;                     )&#10;                 )&#10;                 ProgressChart(&#10;                     data = progressData,&#10;                     title = &quot;일일 활동 진행률&quot;,&#10;                     isDonut = isProgressDonut,&#10;                     isPercentage = false,&#10;                     width = selectedWidth,&#10;                     height = selectedHeight,&#10;                     colors = listOf(&#10;                         Color(0xFF00C7BE), // 청록색 (Move)&#10;                         Color(0xFFFF6B35), // 주황색 (Exercise)&#10;                         Color(0xFF3A86FF)  // 파란색 (Stand)&#10;                     )&#10;                 )&#10;             }&#10;            &quot;Calendar&quot; -&gt; {&#10;                CalendarChart(&#10;                    entries = entries,&#10;                    yearMonth = yearMonth,&#10;&#10;                )&#10;            }&#10;                         &quot;MinBar&quot; -&gt; {&#10;                 MinimalBarChart(&#10;                     data = sampleData,&#10;                     color = Color.Blue,&#10;                     width = selectedWidth,&#10;                     height = selectedHeight&#10;                 )&#10;             }&#10;             &quot;MinLine&quot; -&gt; {&#10;                 MinimalLineChart(&#10;                     data = chartPoints,&#10;                     color = Color.Blue,&#10;                     width = selectedWidth,&#10;                     height = selectedHeight,&#10;                     showPoints = true&#10;                 )&#10;             }&#10;             &quot;MinRange&quot; -&gt; {&#10;                 // 단일 범위 데이터 생성 (심박수 범위 예시: 76-104 bpm)&#10;                 val singleRangeData = RangeChartPoint(&#10;                     x = 0f,&#10;                     yMin = 76f,&#10;                     yMax = 104f,&#10;                     label = &quot;Heart Rate&quot;&#10;                 )&#10;                 MinimalRangeBarChart(&#10;                     data = singleRangeData,&#10;                     containerMin = 60f,  // 정상 심박수 범위 시작&#10;                     containerMax = 120f, // 정상 심박수 범위 끝&#10;                     containerColor = Color.LightGray,&#10;                     rangeColor = Color(0xFFFF9500),&#10;                     width = selectedWidth,&#10;                     height = selectedHeight&#10;                 )&#10;             }&#10;&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ChartPreview() {&#10;    SalusChartTheme {&#10;        SampleCharts()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/chart/src/main/java/com/hdil/saluschart/core/chart/chartMath/CalendarChartMath.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/chart/src/main/java/com/hdil/saluschart/core/chart/chartMath/CalendarChartMath.kt" />
              <option name="originalContent" value="package com.hdil.saluschart.core.chart.chartMath&#10;&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import java.time.YearMonth&#10;&#10;object CalendarChartMath {&#10;    /**&#10;     * 캘린더에 필요한 정보를 계산합니다.&#10;     *&#10;     * @param yearMonth 표시할 년월&#10;     * @return 달력 구성에 필요한 정보 (첫 번째 요일 위치, 해당 월의 일 수, 필요한 행 수)&#10;     */&#10;    fun computeCalendarMetrics(yearMonth: YearMonth): Triple&lt;Int, Int, Int&gt; {&#10;        val firstDayOfMonth = yearMonth.atDay(1)&#10;        val lastDayOfMonth = yearMonth.atEndOfMonth()&#10;        val firstDayOfWeek = firstDayOfMonth.dayOfWeek.value % 7 // 일요일이 0이 되도록 조정&#10;        val totalDays = lastDayOfMonth.dayOfMonth&#10;&#10;        // 필요한 행의 수 계산 (첫 요일 위치 + 일수에 따라 필요한 행 결정)&#10;        val weeks = (firstDayOfWeek + totalDays + 6) / 7&#10;&#10;        return Triple(firstDayOfWeek, totalDays, weeks)&#10;    }&#10;&#10;    /**&#10;     * 값에 따른 원의 크기를 계산합니다.&#10;     *&#10;     * @param value 현재 값&#10;     * @param maxValue 가능한 최대값&#10;     * @param minSize 최소 원 크기&#10;     * @param maxSize 최대 원 크기&#10;     * @return 계산된 원의 크기&#10;     */&#10;    fun calculateBubbleSize(value: Float, maxValue: Float, minSize: Float, maxSize: Float): Float {&#10;        if (maxValue &lt;= 0f) return minSize&#10;        val normalizedValue = value / maxValue&#10;        return minSize + (maxSize - minSize) * normalizedValue&#10;    }&#10;&#10;    fun calculateBubbleColor(color: Color, value: Float, maxValue: Float, minSize: Float, maxSize: Float): Color {&#10;        if (maxValue &lt;= 0f) return color&#10;        val normalizedValue = (value / maxValue).coerceIn(0f, 1f)&#10;        val hsl = FloatArray(3)&#10;        androidx.core.graphics.ColorUtils.colorToHSL(color.toArgb(), hsl)&#10;        val originalL = hsl[2]&#10;        // 최대값일 때 color의 밝기, 값이 작을수록 밝기가 커짐(최대 1.0까지)&#10;        hsl[2] = originalL + (1.0f - originalL) * (1f - normalizedValue)&#10;        hsl[2] = hsl[2].coerceIn(0f, 1f)&#10;        val newArgb = androidx.core.graphics.ColorUtils.HSLToColor(hsl)&#10;        return Color(newArgb)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.hdil.saluschart.core.chart.chartMath&#10;&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import java.time.YearMonth&#10;&#10;object CalendarChartMath {&#10;    /**&#10;     * 캘린더에 필요한 정보를 계산합니다.&#10;     *&#10;     * @param yearMonth 표시할 년월&#10;     * @return 달력 구성에 필요한 정보 (첫 번째 요일 위치, 해당 월의 일 수, 필요한 행 수)&#10;     */&#10;    fun computeCalendarMetrics(yearMonth: YearMonth): Triple&lt;Int, Int, Int&gt; {&#10;        val firstDayOfMonth = yearMonth.atDay(1)&#10;        val lastDayOfMonth = yearMonth.atEndOfMonth()&#10;        val firstDayOfWeek = firstDayOfMonth.dayOfWeek.value % 7 // 일요일이 0이 되도록 조정&#10;        val totalDays = lastDayOfMonth.dayOfMonth&#10;&#10;        // 필요한 행의 수 계산 (첫 요일 위치 + 일수에 따라 필요한 행 결정)&#10;        val weeks = (firstDayOfWeek + totalDays + 6) / 7&#10;&#10;        return Triple(firstDayOfWeek, totalDays, weeks)&#10;    }&#10;&#10;    /**&#10;     * 값에 따른 원의 크기를 계산합니다.&#10;     *&#10;     * @param value 현재 값&#10;     * @param maxValue 가능한 최대값&#10;     * @param minSize 최소 원 크기&#10;     * @param maxSize 최대 원 크기&#10;     * @return 계산된 원의 크기&#10;     */&#10;    fun calculateBubbleSize(value: Float, maxValue: Float, minSize: Float, maxSize: Float): Float {&#10;        if (maxValue &lt;= 0f) return minSize&#10;        val normalizedValue = value / maxValue&#10;        return minSize + (maxSize - minSize) * normalizedValue&#10;    }&#10;&#10;    fun calculateBubbleColor(color: Color, value: Float, maxValue: Float, minSize: Float, maxSize: Float): Color {&#10;        if (maxValue &lt;= 0f) return color&#10;        val normalizedValue = (value / maxValue).coerceIn(0f, 1f)&#10;        val hsl = FloatArray(3)&#10;        androidx.core.graphics.ColorUtils.colorToHSL(color.toArgb(), hsl)&#10;        val originalL = hsl[2]&#10;        // 최대값일 때 color의 밝기, 값이 작을수록 밝기가 커짐(최대 0.9까지)&#10;        hsl[2] = originalL + (0.9f - originalL) * (1f - normalizedValue)&#10;        hsl[2] = hsl[2].coerceIn(0f, 0.9f)&#10;        val newArgb = androidx.core.graphics.ColorUtils.HSLToColor(hsl)&#10;        return Color(newArgb)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ui/compose/src/main/java/com/hdil/saluschart/ui/compose/charts/LineChart.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ui/compose/src/main/java/com/hdil/saluschart/ui/compose/charts/LineChart.kt" />
              <option name="originalContent" value="package com.hdil.saluschart.ui.compose.charts&#10;&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import com.hdil.saluschart.core.chart.chartDraw.ChartDraw&#10;import com.hdil.saluschart.core.chart.chartMath.ChartMath&#10;import com.hdil.saluschart.core.chart.ChartPoint&#10;import com.hdil.saluschart.core.chart.ChartType&#10;import com.hdil.saluschart.core.chart.InteractionType&#10;import com.hdil.saluschart.core.chart.chartDraw.LegendPosition&#10;import com.hdil.saluschart.ui.theme.ChartColor&#10;&#10;@Composable&#10;fun LineChart(&#10;    modifier: Modifier = Modifier,&#10;    data: List&lt;ChartPoint&gt;,      // ChartPoint 기반&#10;    xLabel: String = &quot;Time&quot;,&#10;    yLabel: String = &quot;Value&quot;,&#10;    title: String = &quot;Line Chart Example&quot;,&#10;    lineColor: androidx.compose.ui.graphics.Color = ChartColor.Default,&#10;    strokeWidth: Float = 4f,&#10;    minY: Float? = null,                    // 사용자 지정 최소 Y값&#10;    maxY: Float? = null,                    // 사용자 지정 최대 Y값&#10;    labelTextSize: Float = 28f,&#10;    tooltipTextSize: Float = 32f,&#10;    interactionType: InteractionType = InteractionType.POINT,&#10;    showPoint: Boolean = false, // 포인트 표시 여부&#10;    showLegend: Boolean = false,&#10;    legendPosition: LegendPosition = LegendPosition.BOTTOM,&#10;    chartType : ChartType = ChartType.LINE // 차트 타입 (툴팁 위치 결정용&#10;) {&#10;    if (data.isEmpty()) return&#10;&#10;    val xLabels = data.map { it.x }&#10;    val yValues = data.map { it.y }&#10;&#10;    var canvasPoints by remember { mutableStateOf(listOf&lt;androidx.compose.ui.geometry.Offset&gt;()) }&#10;    var canvasSize by remember { mutableStateOf(Size.Zero) }&#10;    var chartMetrics by remember { mutableStateOf&lt;ChartMath.ChartMetrics?&gt;(null) }&#10;&#10;    var selectedPointIndex by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;&#10;    Column(modifier = modifier.padding(16.dp)) {&#10;        Text(title, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(Modifier.height(16.dp))&#10;&#10;        Box(&#10;            Modifier&#10;        ) {&#10;            Canvas(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;&#10;//                val metrics = ChartMath.computeMetrics(size, yValues)&#10;                val metrics = ChartMath.computeMetrics(&#10;                    size = size,&#10;                    values = yValues,&#10;                    chartType = ChartType.BAR,&#10;                    minY = minY, // 사용자 지정 최소 Y값&#10;                    maxY = maxY&#10;                )&#10;                val points = ChartMath.mapToCanvasPoints(data, size, metrics)&#10;&#10;                // 포인트 위치와 캔버스 크기를 상태 변수에 저장&#10;                canvasPoints = points&#10;                canvasSize = size&#10;                chartMetrics = metrics&#10;&#10;                ChartDraw.drawGrid(this, size, metrics)&#10;                ChartDraw.Line.drawLine(this, points, lineColor, strokeWidth)&#10;                ChartDraw.Line.drawXAxisLabels(&#10;                    ctx = drawContext,&#10;                    labels = xLabels.map { it.toString() },&#10;                    metrics = metrics,&#10;                    textSize = labelTextSize&#10;                )&#10;            }&#10;&#10;            if (showPoint) {&#10;            // Conditional interaction based on interactionType parameter&#10;                when (interactionType) {&#10;                    InteractionType.NEAR_X_AXIS -&gt; {&#10;                        // BarMarker interactions (invisible bars for easier touching)&#10;                        chartMetrics?.let { metrics -&gt;&#10;                            ChartDraw.Bar.BarMarker(&#10;                                values = yValues,&#10;                                metrics = metrics,&#10;                                useLineChartPositioning = true,&#10;                                onBarClick = { index, value -&gt;&#10;                                    // Handle bar click - same logic as point click&#10;                                    selectedPointIndex = if (selectedPointIndex == index) null else index&#10;                                },&#10;                                chartType = chartType,&#10;                                showTooltipForIndex = null,&#10;                                isTouchArea = true&#10;                            )&#10;                        }&#10;                        ChartDraw.Scatter.PointMarker(&#10;                            points = canvasPoints,&#10;                            values = yValues,&#10;                            selectedPointIndex = selectedPointIndex,&#10;                            onPointClick = null,&#10;                            interactive = false,&#10;                            chartType = chartType,&#10;                            showTooltipForIndex = selectedPointIndex&#10;                        )&#10;                    }&#10;                    InteractionType.POINT -&gt; {&#10;                        // PointMarker interactions (interactive data points)&#10;                        ChartDraw.Scatter.PointMarker(&#10;                            points = canvasPoints,&#10;                            values = yValues,&#10;                            selectedPointIndex = selectedPointIndex,&#10;                            onPointClick = { index -&gt;&#10;                                // 이미 선택된 포인트를 다시 클릭하면 선택 해제(null로 설정)&#10;                                selectedPointIndex = if (selectedPointIndex == index) null else index&#10;                            },&#10;                            interactive = true,&#10;                            chartType = chartType,&#10;                            showTooltipForIndex = null&#10;                        )&#10;                    }&#10;                    else -&gt; {&#10;                        // Non-interactive rendering&#10;                        ChartDraw.Scatter.PointMarker(&#10;                            points = canvasPoints,&#10;                            values = yValues,&#10;                            selectedPointIndex = selectedPointIndex,&#10;                            onPointClick = null,&#10;                            interactive = false,&#10;                            chartType = chartType,&#10;                            showTooltipForIndex = null&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(4.dp))&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.hdil.saluschart.ui.compose.charts&#10;&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import com.hdil.saluschart.core.chart.chartDraw.ChartDraw&#10;import com.hdil.saluschart.core.chart.chartMath.ChartMath&#10;import com.hdil.saluschart.core.chart.ChartPoint&#10;import com.hdil.saluschart.core.chart.ChartType&#10;import com.hdil.saluschart.core.chart.InteractionType&#10;import com.hdil.saluschart.core.chart.chartDraw.LegendPosition&#10;import com.hdil.saluschart.ui.theme.ChartColor&#10;&#10;@Composable&#10;fun LineChart(&#10;    modifier: Modifier = Modifier,&#10;    data: List&lt;ChartPoint&gt;,      // ChartPoint 기반&#10;    xLabel: String = &quot;Time&quot;,&#10;    yLabel: String = &quot;Value&quot;,&#10;    title: String = &quot;Line Chart Example&quot;,&#10;    lineColor: androidx.compose.ui.graphics.Color = ChartColor.Default,&#10;    strokeWidth: Float = 4f,&#10;    minY: Float? = null,                    // 사용자 지정 최소 Y값&#10;    maxY: Float? = null,                    // 사용자 지정 최대 Y값&#10;    labelTextSize: Float = 28f,&#10;    tooltipTextSize: Float = 32f,&#10;    interactionType: InteractionType = InteractionType.POINT,&#10;    showPoint: Boolean = false, // 포인트 표시 여부&#10;    showLegend: Boolean = false,&#10;    legendPosition: LegendPosition = LegendPosition.BOTTOM,&#10;    chartType : ChartType = ChartType.LINE // 차트 타입 (툴팁 위치 결정용&#10;) {&#10;    if (data.isEmpty()) return&#10;&#10;    val xLabels = data.map { it.x }&#10;    val yValues = data.map { it.y }&#10;&#10;    var canvasPoints by remember { mutableStateOf(listOf&lt;androidx.compose.ui.geometry.Offset&gt;()) }&#10;    var canvasSize by remember { mutableStateOf(Size.Zero) }&#10;    var chartMetrics by remember { mutableStateOf&lt;ChartMath.ChartMetrics?&gt;(null) }&#10;&#10;    var selectedPointIndex by remember { mutableStateOf&lt;Int?&gt;(null) }&#10;&#10;    Column(modifier = modifier.padding(16.dp)) {&#10;        Text(title, style = MaterialTheme.typography.titleMedium)&#10;        Spacer(Modifier.height(16.dp))&#10;&#10;        Box(&#10;            Modifier&#10;        ) {&#10;            Canvas(&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;&#10;//                val metrics = ChartMath.computeMetrics(size, yValues)&#10;                val metrics = ChartMath.computeMetrics(&#10;                    size = size,&#10;                    values = yValues,&#10;                    chartType = ChartType.BAR,&#10;                    minY = minY, // 사용자 지정 최소 Y값&#10;                    maxY = maxY&#10;                )&#10;                val points = ChartMath.mapToCanvasPoints(data, size, metrics)&#10;&#10;                // 포인트 위치와 캔버스 크기를 상태 변수에 저장&#10;                canvasPoints = points&#10;                canvasSize = size&#10;                chartMetrics = metrics&#10;&#10;                ChartDraw.drawGrid(this, size, metrics)&#10;                ChartDraw.Line.drawLine(this, points, lineColor, strokeWidth)&#10;                ChartDraw.Line.drawXAxisLabels(&#10;                    ctx = drawContext,&#10;                    labels = xLabels.map { it.toString() },&#10;                    metrics = metrics,&#10;                    textSize = labelTextSize&#10;                )&#10;            }&#10;&#10;            if (showPoint) {&#10;            // Conditional interaction based on interactionType parameter&#10;                when (interactionType) {&#10;                    InteractionType.NEAR_X_AXIS -&gt; {&#10;                        // BarMarker interactions (invisible bars for easier touching)&#10;                        chartMetrics?.let { metrics -&gt;&#10;                            ChartDraw.Bar.BarMarker(&#10;                                values = yValues,&#10;                                metrics = metrics,&#10;                                useLineChartPositioning = true,&#10;                                onBarClick = { index, value -&gt;&#10;                                    // Handle bar click - same logic as point click&#10;                                    selectedPointIndex = if (selectedPointIndex == index) null else index&#10;                                },&#10;                                chartType = chartType,&#10;                                showTooltipForIndex = null,&#10;                                isTouchArea = true&#10;                            )&#10;                        }&#10;                        ChartDraw.Scatter.PointMarker(&#10;                            points = canvasPoints,&#10;                            values = yValues,&#10;                            selectedPointIndex = selectedPointIndex,&#10;                            onPointClick = null,&#10;                            interactive = false,&#10;                            chartType = chartType,&#10;                            showTooltipForIndex = selectedPointIndex&#10;                        )&#10;                    }&#10;                    InteractionType.POINT -&gt; {&#10;                        // PointMarker interactions (interactive data points)&#10;                        ChartDraw.Scatter.PointMarker(&#10;                            points = canvasPoints,&#10;                            values = yValues,&#10;                            selectedPointIndex = selectedPointIndex,&#10;                            onPointClick = { index -&gt;&#10;                                // 이미 선택된 포인트를 다시 클릭하면 선택 해제(null로 설정)&#10;                                selectedPointIndex = if (selectedPointIndex == index) null else index&#10;                            },&#10;                            interactive = true,&#10;                            chartType = chartType,&#10;                            showTooltipForIndex = null&#10;                        )&#10;                    }&#10;                    else -&gt; {&#10;                        // Non-interactive rendering&#10;                        ChartDraw.Scatter.PointMarker(&#10;                            points = canvasPoints,&#10;                            values = yValues,&#10;                            selectedPointIndex = selectedPointIndex,&#10;                            onPointClick = null,&#10;                            interactive = false,&#10;                            chartType = chartType,&#10;                            showTooltipForIndex = null&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(4.dp))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ui/compose/src/main/java/com/hdil/saluschart/ui/compose/components/Legend.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ui/compose/src/main/java/com/hdil/saluschart/ui/compose/components/Legend.kt" />
              <option name="updatedContent" value="package com.hdil.saluschart.ui.compose.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.hdil.saluschart.core.chart.ChartPoint&#10;&#10;/**&#10; * 차트 범례를 Composable로 표시합니다.&#10; *&#10; * @param modifier 모디파이어&#10; * @param labels 범례 항목 레이블 목록 (직접 제공된 경우)&#10; * @param chartData 차트 데이터 포인트 목록 (레이블을 추출할 경우)&#10; * @param colors 각 항목에 사용한 색상 목록&#10; * @param title 범례 제목 (기본값: null)&#10; * @param colorBoxSize 색상 상자 크기&#10; * @param textSize 텍스트 크기&#10; * @param spacing 항목 간 간격&#10; */&#10;@Composable&#10;fun ChartLegend(&#10;    modifier: Modifier = Modifier,&#10;    labels: List&lt;String&gt;? = null,&#10;    chartData: List&lt;ChartPoint&gt;? = null,&#10;    colors: List&lt;Color&gt;,&#10;    title: String? = null,&#10;    colorBoxSize: androidx.compose.ui.unit.Dp = 12.dp,&#10;    textSize: androidx.compose.ui.unit.TextUnit = 12.sp,&#10;    spacing: androidx.compose.ui.unit.Dp = 8.dp&#10;) {&#10;    val legendLabels = labels ?: chartData?.mapIndexed { i, point -&gt;&#10;        point.label ?: &quot;항목 ${i + 1}&quot;&#10;    } ?: emptyList()&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(spacing)&#10;    ) {&#10;        // 범례 제목 (제공된 경우)&#10;        title?.let {&#10;            Text(&#10;                text = it,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = (textSize.value + 2).sp,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;        }&#10;&#10;        // 각 범례 항목&#10;        legendLabels.forEachIndexed { index, label -&gt;&#10;            if (index &lt; colors.size) {&#10;                LegendItem(&#10;                    color = colors[index],&#10;                    label = label,&#10;                    colorBoxSize = colorBoxSize,&#10;                    textSize = textSize,&#10;                    spacing = spacing&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * 범례의 개별 항목을 Composable로 표시합니다.&#10; *&#10; * @param color 색상&#10; * @param label 레이블 텍스트&#10; * @param colorBoxSize 색상 상자 크기&#10; * @param textSize 텍스트 크기&#10; * @param spacing 상자와 텍스트 사이 간격&#10; */&#10;@Composable&#10;fun LegendItem(&#10;    color: Color,&#10;    label: String,&#10;    colorBoxSize: androidx.compose.ui.unit.Dp = 12.dp,&#10;    textSize: androidx.compose.ui.unit.TextUnit = 12.sp,&#10;    spacing: androidx.compose.ui.unit.Dp = 8.dp&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(spacing)&#10;    ) {&#10;        // 색상 상자&#10;        Box(&#10;            modifier = Modifier&#10;                .size(colorBoxSize)&#10;                .background(&#10;                    color = color,&#10;                    shape = RoundedCornerShape(2.dp)&#10;                )&#10;        )&#10;        &#10;        // 레이블 텍스트&#10;        Text(&#10;            text = label,&#10;            fontSize = textSize,&#10;            color = MaterialTheme.colorScheme.onSurface,&#10;            style = MaterialTheme.typography.bodySmall&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * 스크롤 가능한 차트 범례를 Composable로 표시합니다.&#10; *&#10; * @param modifier 모디파이어&#10; * @param labels 범례 항목 레이블 목록 (직접 제공된 경우)&#10; * @param chartData 차트 데이터 포인트 목록 (레이블을 추출할 경우)&#10; * @param colors 각 항목에 사용한 색상 목록&#10; * @param title 범례 제목 (기본값: null)&#10; * @param colorBoxSize 색상 상자 크기&#10; * @param textSize 텍스트 크기&#10; * @param spacing 항목 간 간격&#10; * @param maxHeight 최대 높이 (이를 초과하면 스크롤)&#10; */&#10;@Composable&#10;fun ScrollableChartLegend(&#10;    modifier: Modifier = Modifier,&#10;    labels: List&lt;String&gt;? = null,&#10;    chartData: List&lt;ChartPoint&gt;? = null,&#10;    colors: List&lt;Color&gt;,&#10;    title: String? = null,&#10;    colorBoxSize: androidx.compose.ui.unit.Dp = 12.dp,&#10;    textSize: androidx.compose.ui.unit.TextUnit = 12.sp,&#10;    spacing: androidx.compose.ui.unit.Dp = 8.dp,&#10;    maxHeight: androidx.compose.ui.unit.Dp = 200.dp&#10;) {&#10;    val legendLabels = labels ?: chartData?.mapIndexed { i, point -&gt;&#10;        point.label ?: &quot;항목 ${i + 1}&quot;&#10;    } ?: emptyList()&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(spacing)&#10;    ) {&#10;        // 범례 제목 (제공된 경우)&#10;        title?.let {&#10;            Text(&#10;                text = it,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = (textSize.value + 2).sp,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;        }&#10;&#10;        // 스크롤 가능한 범례 항목들&#10;        LazyColumn(&#10;            modifier = Modifier.heightIn(max = maxHeight),&#10;            verticalArrangement = Arrangement.spacedBy(spacing)&#10;        ) {&#10;            items(legendLabels.take(colors.size)) { label -&gt;&#10;                val index = legendLabels.indexOf(label)&#10;                if (index &gt;= 0 &amp;&amp; index &lt; colors.size) {&#10;                    LegendItem(&#10;                        color = colors[index],&#10;                        label = label,&#10;                        colorBoxSize = colorBoxSize,&#10;                        textSize = textSize,&#10;                        spacing = spacing&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>